from aiogram.fsm.state import StatesGroup
from gspread import Client, Spreadsheet, Worksheet, service_account
from numpy.lib.function_base import extract
import os
from config import token, table_id
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, CallbackQuery, ReplyKeyboardRemove
from keyboards import GiveAddUsersKeyboard, GiveStartKeyboard
from aiogram.enums import ParseMode
import json
from aiogram import F
import loguru
import threading

bot = Bot(token=token, parse_mode = "HTML")

dp = Dispatcher()

ADMIN_ID = 684882717 #–∞–Ω—è
ADMIN_ID_2 = 1045401545 #—è
ADMIN_ID_3 = 362124322 #–Ω–∞—Å—Ç—è
admins = [ADMIN_ID, ADMIN_ID_3]
class UserStates(StatesGroup):
	twitch = State()
	dotaname = State()
	mmr = State()
	dotaid = State()
	pos = State()
	captain = State()
	screen = State()


def client_init_json() -> Client:
	return service_account(filename='sowiicup-a7b6607dcc6b.json')

client = client_init_json()
table = client.open_by_key(table_id)
title = table.worksheets()[0].title
worksheet = table.worksheet(title)

def is_banned(user_id):
	with open('players/banlist.txt', 'r', encoding='utf-8') as file:
		banlist = file.readlines()
		banlist = [item.strip() for item in banlist]
	if str(user_id) in banlist:
		return True
	else:
		return False

@dp.message(Command("banlist"))
async def cmd_get_banlist(message: types.Message):
	if message.from_user.id in admins:
		with open('players/banlist.txt', 'r', encoding='utf-8') as file:
			banlist = file.readlines()
			banlist = [item.strip() for item in banlist]
		await message.answer('\n'.join(banlist))

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
	await state.clear()
	if is_banned(message.from_user.id) == False:
		if message.from_user.id in admins:
			await message.answer(f"–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω! @{message.from_user.username}", )
		else:
			await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!", reply_markup= GiveStartKeyboard())
			print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –Ω–∞–∂–∞–ª /start')

@dp.message(Command("unban"))
async def cmd_start(message: types.Message):
	if message.from_user.id in admins:
		if len(message.text.split(' '))==2:
			user_id = message.text.replace('/unban ', '')

			with open('players/banlist.txt', 'r', encoding='utf-8') as file:
				old_banlist = file.readlines()
				old_banlist = [item.strip() for item in old_banlist]
			new_banlist = []
			if user_id in old_banlist:
				for i in old_banlist:
					if i != user_id:
						new_banlist.append(i)

				with open('players/banlist.txt', 'w', encoding='utf-8') as file:
					for i in new_banlist:
						file.write(i+'\n')
				os.remove(f'players/forms/{user_id}.txt')

				await message.answer(f"—Ä–∞–∑–±–∞–Ω–µ–Ω {user_id}", )
			else:
				await message.answer(f'{user_id} –Ω–µ –∑–∞–±–∞–Ω–µ–Ω')

@dp.message(StateFilter(None))
async def sendmsg(message: types.Message, state: FSMContext):
	if is_banned(message.from_user.id) == False:
		if message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
			if message.from_user.id not in admins:
				if worksheet.find(str(message.from_user.id)) != None:
					await message.answer('–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞')
				else:
					if os.path.isfile(f'players/forms/{message.from_user.id}.txt') == True:
						await message.answer('–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ! –ó–∞ —Å–ø–∞–º –º–æ–∂–Ω–æ –æ—Ç–ª–µ—Ç–µ—Ç—å –≤ –±–∞–Ω.')
					else:
						await message.answer('–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ –Ω–∞ —Ç–≤–∏—á–µ', reply_markup=ReplyKeyboardRemove())
						await state.set_state(UserStates.twitch)

@dp.message(UserStates.twitch)
async def get_twitch(message: types.Message, state: FSMContext):
	if message.text != None:
		await state.update_data(twitch=message.text)
		await message.answer('–ó–∞–ø–∏—Å–∞–ª–∞. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫')
		await state.set_state(UserStates.dotaname)
	else:
		await message.answer('–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç')

@dp.message(UserStates.dotaname)
async def get_twitch(message: types.Message, state: FSMContext):
	if message.text != None:
		await state.update_data(dotaname=message.text)
		await message.answer('–ú–æ–ª–æ–¥–µ—Ü! –ù–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –º–º—Ä —Ç–æ—á–Ω–æ')
		await state.set_state(UserStates.mmr)
	else:
		await message.answer('–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç')

@dp.message(UserStates.mmr)
async def get_twitch(message: types.Message, state: FSMContext):
	if message.text != None:
		if message.text.isdigit():
			await state.update_data(mmr=message.text)
			await message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∞–π–¥–∏ –≤ –¥–æ—Ç–µ')
			await state.set_state(UserStates.dotaid)
		else:
			await message.answer('–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ! –¢–≤–æ–π —Ç–æ—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥')
	else:
		await message.answer('–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç')

@dp.message(UserStates.dotaid)
async def get_twitch(message: types.Message, state: FSMContext):
	if message.text != None:
		if message.text.isdigit():
			await state.update_data(dotaid=message.text)
			await message.answer('–°–∫–∞–∂–∏ –º–Ω–µ –Ω–∞ –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ç—ã –∏–≥—Ä–∞–µ—à—å. –ù–∞–ø–∏—à–∏ –º–∏–Ω–∏–º—É–º –¥–≤–µ –ø–æ–∑–∏—Ü–∏–∏(–æ—Å–Ω–æ–≤–Ω—É—é –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é)')
			await state.set_state(UserStates.pos)
		else:
			await message.answer('–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ! –¢–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –∞–π–¥–∏ –∏–∑ –¥–æ—Ç—ã.')
	else:
		await message.answer('–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç')

@dp.message(UserStates.pos)
async def get_twitch(message: types.Message, state: FSMContext):
	if message.text != None:
		await state.update_data(pos=message.text)
		await message.answer('–ê–≥–∞, –∑–∞–ø–∏—Å–∞–ª–∞. –•–æ—á–µ—à—å –ª–∏ —Ç—ã –±—ã—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã?')
		await state.set_state(UserStates.captain)
	else:
		await message.answer('–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç')

@dp.message(UserStates.captain)
async def get_twitch(message: types.Message, state: FSMContext):
	if message.text != None:
		await state.update_data(captain=message.text)
		await message.answer('–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –º–º—Ä')
		await state.set_state(UserStates.screen)
	else:
		await message.answer('–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç')

@dp.message(UserStates.screen)
async def get_twitch(message: types.Message, state: FSMContext):
	if message.photo:
		await state.update_data(screen=message.photo[-1].file_id)

		user = await state.get_data()
		data = [user['twitch'], user['dotaname'], user['mmr'], user['dotaid'], user['pos'], user['captain'], f'https://ru.dotabuff.com/players/{user["dotaid"]}', '–Ω–µ—Ç',
				str(message.from_user.id)]
		print(f'–ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç @{message.from_user.username} {message.from_user.id}')

		with open(f'players/forms/{message.from_user.id}.txt', 'w', encoding='utf-8') as file:
			file.writelines(f'{item}\n' for item in data)
			print(
				f'–î–∞–Ω–Ω—ã–µ –æ—Ç @{message.from_user.username} {message.from_user.id} –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ, –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')

		await message.bot.download(file=user['screen'],
								   destination=f'images/{message.from_user.id}.jpg')
		print(f'–§–æ—Ç–æ {message.from_user.id}.jpg —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ')

		msg_ids = []
		chat_ids = []
		for admin in admins:
			msg = await bot.send_photo(chat_id=admin, photo=user['screen'],
									   caption=f"1) {user['twitch']}\n2) {user['dotaname']}\n3) {user['mmr']}\n4) {user['dotaid']}\n5) {user['pos']}\n6) {user['captain']}\nhttps://ru.dotabuff.com/players/{user['dotaid']}",
									   reply_markup=GiveAddUsersKeyboard(message.from_user.id))
			msg_ids.append(msg.message_id)
			chat_ids.append(str(admin))

		with open(f'players/forms/{message.from_user.id}.txt', 'a', encoding='utf-8') as file:
			file.write('_'.join([str(i) for i in msg_ids]) + "\n")
			file.write('_'.join(chat_ids))

		await message.answer('–º—É—Ä –º—É—Ä –º—É—Ä, —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.‚ù§Ô∏è')
		await state.clear()

	else:
		await message.answer('–û—Ç–ø—Ä–∞–≤–ª—å –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç')

#–∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É
@dp.callback_query(F.data.startswith('add_'))
async def cancel(call: CallbackQuery):
	user_id = call.data.replace('add_','')

	old_caption = call.message.caption
	caption = old_caption + f'\n\n‚úÖ–ü–†–ò–ù–Ø–¢–ê (@{call.from_user.username})'

	with open(f'players/forms/{user_id}.txt', 'r', encoding='utf-8') as file:
		data = file.readlines()
		data[:] = [item.strip() for item in data]
	chat_ids = [int(i) for i in data[-1].split('_')]
	msg_ids = [int(i) for i in data[-2].split('_')]

	worksheet.append_row(data[:-2])
	print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É')

	await bot.send_message(user_id, '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!')
	await call.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.', show_alert=True)
	for i in range(len(chat_ids)):
		await bot.edit_message_caption(chat_id=chat_ids[i], message_id=msg_ids[i], caption = caption)

#–∫–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É
@dp.callback_query(F.data.startswith('noadd_'))
async def cancel(call: CallbackQuery):
	user_id = call.data.replace('noadd_','')
	old_caption = call.message.caption
	caption = old_caption + f'\n\nüö´–û–¢–ö–õ–û–ù–ï–ù–ê (@{call.from_user.username})'
	with open(f'players/forms/{user_id}.txt', 'r', encoding='utf-8') as file:
		data = file.readlines()
		data[:] = [item.strip() for item in data]
	chat_ids = [int(i) for i in data[-1].split('_')]
	msg_ids = [int(i) for i in data[-2].split('_')]

	print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É')
	await bot.send_message(user_id, '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!', reply_markup=GiveStartKeyboard())
	await call.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.', show_alert=True)
	for i in range(len(chat_ids)):
		await bot.edit_message_caption(chat_id=chat_ids[i], message_id=msg_ids[i], caption = caption)
	os.remove(f'players/forms/{user_id}.txt')

@dp.callback_query(F.data.startswith('ban_'))
async def cancel(call: CallbackQuery):
	user_id = call.data.replace('ban_','')
	old_caption = call.message.caption
	caption = old_caption + f'\n\n–ë–ê–ù–ë–ê–ù–ë–ê–ù–ë–ê–ù (@{call.from_user.username})'

	with open(f'players/banlist.txt', 'a') as file:
		file.write(user_id+'\n')

	with open(f'players/forms/{user_id}.txt', 'r', encoding='utf-8') as file:
		data = file.readlines()
		data[:] = [item.strip() for item in data]
	chat_ids = [int(i) for i in data[-1].split('_')]
	msg_ids = [int(i) for i in data[-2].split('_')]

	await bot.send_message(user_id, '–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã! –ü–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
	await call.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.', show_alert=True)
	for i in range(len(chat_ids)):
		await bot.edit_message_caption(chat_id=chat_ids[i], message_id=msg_ids[i], caption = caption)

async def main():
	await dp.start_polling(bot)

if __name__ == '__main__':
	client_init_json()
	asyncio.run(main())

# emoji="üé≤"